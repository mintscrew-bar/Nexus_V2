package com.nexus.controller;

import com.nexus.entity.User;
import com.nexus.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/users") // http://localhost:8080/api/users 로 시작하는 모든 요청을 처리
public class UserController {

    @Autowired
    private UserRepository userRepository;

    // 모든 사용자 목록을 조회하는 API (주로 관리자용)
    @GetMapping
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    // --- 아래 API가 Keycloak 연동에 맞춰 수정/추가되었습니다 ---

    /**
     * 현재 로그인한 사용자의 프로필 정보를 조회하는 API입니다.
     * 참고: 실제 구현에서는 Spring Security Context에서 인증된 사용자 정보를 가져와야 합니다.
     * 지금은 Keycloak ID를 직접 받는 형태로 임시 구현합니다.
     *
     * @param keycloakId Keycloak으로부터 받은 현재 로그인된 사용자의 ID
     * @return ResponseEntity<User>
     */
    @GetMapping("/me")
    public ResponseEntity<User> getCurrentUser(@RequestParam String keycloakId) {
        Optional<User> userOptional = userRepository.findByKeycloakId(keycloakId);
        // orElse(null) 대신 isPresent() 체크 후 404 Not Found를 반환하는 것이 더 RESTful 합니다.
        return userOptional.map(ResponseEntity::ok)
                           .orElseGet(() -> ResponseEntity.notFound().build());
    }

    // 'createUser' API는 Keycloak이 회원가입을 처리하므로 제거되었습니다.
    // 사용자가 Keycloak을 통해 처음 로그인할 때, 우리 서버는 해당 사용자 정보를 DB에 저장하는 로직을 수행하게 됩니다.
}
