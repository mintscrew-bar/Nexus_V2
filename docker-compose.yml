# docker-compose.yml
# 이 파일은 프로젝트의 루트 디렉토리에 위치해야 합니다.

version: '3.8' # Docker Compose 파일 형식 버전을 지정합니다.

services:
  # Spring Boot 백엔드 애플리케이션 서비스
  backend:
    build: ./backend # 'backend' 폴더에 있는 Dockerfile을 사용하여 이미지를 빌드합니다.
    container_name: nexus-backend # 컨테이너에 고정된 이름을 부여합니다.
    depends_on:
      - db # 'db' 서비스가 먼저 시작된 후에 이 서비스가 시작되도록 의존성을 설정합니다.
    ports:
      # 호스트의 포트와 컨테이너의 포트를 연결합니다.
      # .env 파일의 SERVER_PORT 값을 사용하며, 값이 없으면 기본값으로 8080을 사용합니다.
      - "${SERVER_PORT:-8080}:${SERVER_PORT:-8080}"
    environment:
      # .env 파일에 정의된 환경변수들을 컨테이너 내부로 주입합니다.
      # Spring Boot 애플리케이션은 이 값들을 참조하여 설정을 구성합니다.
      - SERVER_PORT=${SERVER_PORT}
      - DB_URL=${DB_URL}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - RIOT_API_KEY=${RIOT_API_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_EXPIRATION_MS=${JWT_EXPIRATION_MS}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    restart: always # 컨테이너가 비정상적으로 종료되면 항상 다시 시작합니다.

  # PostgreSQL 데이터베이스 서비스
  db:
    image: postgres:15 # 공식 PostgreSQL 15 이미지를 사용합니다.
    container_name: nexus-db # 컨테이너에 고정된 이름을 부여합니다.
    environment:
      # .env 파일의 값을 사용하여 데이터베이스를 설정합니다.
      POSTGRES_DB: nexusdb # 생성할 데이터베이스의 이름입니다.
      POSTGRES_USER: ${DB_USERNAME} # 생성할 사용자의 이름입니다.
      POSTGRES_PASSWORD: ${DB_PASSWORD} # 사용자의 비밀번호입니다.
    volumes:
      # 데이터베이스 데이터를 영속적으로 저장하기 위해 볼륨을 마운트합니다.
      # 이렇게 하면 컨테이너가 삭제되어도 데이터는 유지됩니다.
      - db_data:/var/lib/postgresql/data
    ports:
      # 데이터베이스 디버깅 등을 위해 호스트와 컨테이너의 포트를 연결합니다.
      - "5432:5432"
    restart: always # 컨테이너가 비정상적으로 종료되면 항상 다시 시작합니다.

# 데이터 영속성을 위해 사용할 Docker 볼륨을 정의합니다.
volumes:
  db_data:
